/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: /home/tahina/everest/mitls_dev/kremlin/krml -drop FStar.Tactics.\* -drop FStar.Tactics -drop FStar.Reflection.\* -bundle LowParseWriters.Test=LowParse.\*,LowParseWriters,LowParseWriters.\* -add-include "kremlin/internal/compat.h" -warn-error -9@4@2 -dast -skip-linking prims.krml FStar_Pervasives_Native.krml FStar_Pervasives.krml FStar_Mul.krml FStar_Squash.krml FStar_Classical.krml FStar_Preorder.krml FStar_Calc.krml FStar_StrongExcludedMiddle.krml FStar_List_Tot_Base.krml FStar_List_Tot_Properties.krml FStar_List_Tot.krml FStar_Seq_Base.krml FStar_FunctionalExtensionality.krml FStar_Seq_Properties.krml FStar_Seq.krml FStar_Math_Lib.krml FStar_Math_Lemmas.krml FStar_BitVector.krml FStar_UInt.krml FStar_UInt32.krml FStar_Int.krml FStar_Int16.krml FStar_Ghost.krml FStar_Set.krml FStar_ErasedLogic.krml FStar_PropositionalExtensionality.krml FStar_PredicateExtensionality.krml FStar_TSet.krml FStar_Monotonic_Heap.krml FStar_Heap.krml FStar_Map.krml FStar_Monotonic_Witnessed.krml FStar_Monotonic_HyperHeap.krml FStar_Monotonic_HyperStack.krml FStar_HyperStack.krml FStar_HyperStack_ST.krml Spec_Loops.krml FStar_UInt64.krml FStar_Universe.krml FStar_GSet.krml FStar_ModifiesGen.krml FStar_Range.krml FStar_Reflection_Types.krml FStar_Tactics_Types.krml FStar_Tactics_Result.krml FStar_Tactics_Effect.krml FStar_Reflection_Data.krml FStar_Tactics_Builtins.krml FStar_Reflection_Const.krml FStar_Order.krml FStar_Reflection_Builtins.krml FStar_Reflection_Derived.krml FStar_Reflection_Derived_Lemmas.krml FStar_Reflection.krml FStar_Tactics_Print.krml FStar_Tactics_SyntaxHelpers.krml FStar_Tactics_Util.krml FStar_Reflection_Formula.krml FStar_Tactics_Derived.krml FStar_Tactics_Logic.krml FStar_Tactics.krml FStar_BigOps.krml LowStar_Monotonic_Buffer.krml LowStar_Buffer.krml LowStar_BufferOps.krml C_Loops.krml LowParse_Math.krml FStar_UInt8.krml LowParse_Bytes.krml LowParse_Slice.krml LowParse_Spec_Base.krml LowParse_Low_Base_Spec.krml LowParse_Low_Base.krml LowParse_Spec_Combinators.krml LowParse_Spec_List.krml LowParse_Low_List.krml LowParse_Spec_FLData.krml LowParse_Low_Combinators.krml LowParse_Low_FLData.krml FStar_Int64.krml FStar_Int32.krml FStar_Int8.krml FStar_UInt16.krml FStar_Int_Cast.krml FStar_Endianness.krml LowParse_Spec_Seq.krml LowParse_Spec_Int.krml LowParse_Spec_BoundedInt.krml FStar_UInt128.krml LowStar_Endianness.krml LowParse_Low_Endianness.krml LowParse_BitFields.krml LowParse_Endianness.krml LowParse_Endianness_BitFields.krml LowParse_Low_BoundedInt.krml LowParse_Spec_SeqBytes_Base.krml LowParse_Spec_DER.krml LowParse_Spec_BCVLI.krml LowParse_Spec_AllIntegers.krml LowParse_Spec_VLData.krml LowParse_Low_VLData.krml LowParse_Spec_VLGen.krml LowParse_Low_VLGen.krml LowParse_Low_Int.krml LowParse_Low_DER.krml LowParse_Low_BCVLI.krml LowParse_Spec_Array.krml LowParse_Spec_VCList.krml LowParse_Low_VCList.krml LowParse_Spec_IfThenElse.krml LowParse_Low_IfThenElse.krml LowParse_TacLib.krml LowParse_Spec_Enum.krml LowParse_Spec_Sum.krml LowParse_Low_Enum.krml LowParse_Low_Sum.krml LowParse_Low_Tac_Sum.krml LowParse_Spec_Option.krml LowParse_Low_Option.krml LowStar_Modifies.krml FStar_Char.krml FStar_Exn.krml FStar_ST.krml FStar_All.krml FStar_List.krml FStar_String.krml FStar_Bytes.krml LowParse_Bytes32.krml LowParse_Spec_Bytes.krml LowParse_Low_Bytes.krml LowParse_Low_Array.krml LowParse_Low.krml FStar_IndefiniteDescription.krml FStar_Monotonic_Pure.krml LowParseWriters_LowParse.krml LowParseWriters.krml LowParseWriters_NoHoare.krml LowParseWriters_Parsers.krml LowParseWriters_NoHoare_Parsers.krml LowParseWriters_Compat.krml LowParseWriters_NoHoare_Compat.krml LowParseWriters_Test.krml
  F* version: 015b72e3
  KreMLin version: 0f08f124
 */
#include "kremlin/internal/compat.h"
#include "kremlib.h"
#ifndef __LowParseWriters_Test_H
#define __LowParseWriters_Test_H

#include "LowStar.h"


typedef struct LowParseWriters_rptr_s
{
  uint8_t *rptr_base;
  uint32_t rptr_len;
}
LowParseWriters_rptr;

#define LowParseWriters_Correct 0
#define LowParseWriters_Error 1

typedef uint8_t LowParseWriters_result__bool_tags;

typedef struct LowParseWriters_result__bool_s
{
  LowParseWriters_result__bool_tags tag;
  union {
    bool case_Correct;
    Prims_string case_Error;
  }
  ;
}
LowParseWriters_result__bool;

LowParseWriters_result__bool LowParseWriters_Test_test_read();

LowParseWriters_result__bool LowParseWriters_Test_test_read_if_1();

typedef struct LowParseWriters_result__uint32_t_s
{
  LowParseWriters_result__bool_tags tag;
  union {
    uint32_t case_Correct;
    Prims_string case_Error;
  }
  ;
}
LowParseWriters_result__uint32_t;

LowParseWriters_result__uint32_t
LowParseWriters_Test_test_read_from_ptr(LowParseWriters_rptr b);

LowParseWriters_result__uint32_t
LowParseWriters_Test_test_read_if_nontrivial(LowParseWriters_rptr b);

LowParseWriters_result__uint32_t
LowParseWriters_Test_test_read_if_really_nontrivial(
  LowParseWriters_rptr b,
  LowParseWriters_rptr c
);

#define LowParseWriters_ICorrect 0
#define LowParseWriters_IError 1
#define LowParseWriters_IOverflow 2

typedef uint8_t LowParseWriters_iresult_____tags;

typedef struct LowParseWriters_iresult_____s
{
  LowParseWriters_iresult_____tags tag;
  union {
    uint32_t case_ICorrect;
    Prims_string case_IError;
  }
  ;
}
LowParseWriters_iresult____;

LowParseWriters_iresult____
LowParseWriters_Test_extract_write_two_ints_1(
  uint32_t x,
  uint32_t y,
  uint8_t *buf,
  uint32_t len,
  uint32_t pos
);

LowParseWriters_iresult____
LowParseWriters_Test_extract_write_two_ints_2(
  uint32_t x,
  uint32_t y,
  uint8_t *buf,
  uint32_t len,
  uint32_t pos
);

LowParseWriters_iresult____
LowParseWriters_Test_extract_write_two_ints_ifthenelse_2_aux(
  uint32_t x,
  uint32_t y,
  uint8_t *buf,
  uint32_t len,
  uint32_t pos
);

typedef struct LowParseWriters_Test_example_s
{
  uint32_t left;
  uint32_t right;
}
LowParseWriters_Test_example;

uint32_t
LowParseWriters_Test___proj__Mkexample__item__left(LowParseWriters_Test_example projectee);

uint32_t
LowParseWriters_Test___proj__Mkexample__item__right(LowParseWriters_Test_example projectee);

typedef struct K___uint32_t_uint32_t_s
{
  uint32_t fst;
  uint32_t snd;
}
K___uint32_t_uint32_t;

LowParseWriters_Test_example
LowParseWriters_Test_synth_example(K___uint32_t_uint32_t uu____6435);

K___uint32_t_uint32_t LowParseWriters_Test_synth_example_recip(LowParseWriters_Test_example e);

LowParseWriters_iresult____
LowParseWriters_Test_extract_write_example(
  uint32_t left,
  uint32_t right,
  uint8_t *buf,
  uint32_t len,
  uint32_t pos
);

LowParseWriters_iresult____
LowParseWriters_Test_extract_write_two_ints(
  uint32_t left,
  uint32_t right,
  uint8_t *buf,
  uint32_t len,
  uint32_t pos
);

#define __LowParseWriters_Test_H_DEFINED
#endif
