{"kind": "protocol-info", "rest": "[...]"}
{"kind": "response", "query-id": "1", "response": [{"level": "warning", "message": "The lightweight do notation [x <- y; z] or [x ;; z] is deprecated, use let operators (i.e. [let* x = y in z] or [y ;* z], [*] being any sequence of operator characters) instead.", "number": 350, "ranges": [{"beg": [80, 53], "end": [80, 77], "fname": "FStar.Ghost.fsti"}]}, {"level": "warning", "message": "The lightweight do notation [x <- y; z] or [x ;; z] is deprecated, use let operators (i.e. [let* x = y in z] or [y ;* z], [*] being any sequence of operator characters) instead.", "number": 350, "ranges": [{"beg": [86, 2], "end": [86, 40], "fname": "FStar.Ghost.fsti"}]}, {"level": "warning", "message": "The lightweight do notation [x <- y; z] or [x ;; z] is deprecated, use let operators (i.e. [let* x = y in z] or [y ;* z], [*] being any sequence of operator characters) instead.", "number": 350, "ranges": [{"beg": [86, 13], "end": [86, 40], "fname": "FStar.Ghost.fsti"}]}, {"level": "warning", "message": "The lightweight do notation [x <- y; z] or [x ;; z] is deprecated, use let operators (i.e. [let* x = y in z] or [y ;* z], [*] being any sequence of operator characters) instead.", "number": 350, "ranges": [{"beg": [97, 2], "end": [97, 51], "fname": "FStar.Ghost.fsti"}]}, {"level": "warning", "message": "The lightweight do notation [x <- y; z] or [x ;; z] is deprecated, use let operators (i.e. [let* x = y in z] or [y ;* z], [*] being any sequence of operator characters) instead.", "number": 350, "ranges": [{"beg": [97, 13], "end": [97, 51], "fname": "FStar.Ghost.fsti"}]}, {"level": "warning", "message": "The lightweight do notation [x <- y; z] or [x ;; z] is deprecated, use let operators (i.e. [let* x = y in z] or [y ;* z], [*] being any sequence of operator characters) instead.", "number": 350, "ranges": [{"beg": [97, 24], "end": [97, 51], "fname": "FStar.Ghost.fsti"}]}], "status": "success"}
{"kind": "response", "query-id": "2", "response": [{"level": "error", "message": "Expected expression of type \"int\"; got expression \"\"A\"\" of type \"string\"", "number": 189, "ranges": [{"beg": [4, 48], "end": [4, 51], "fname": "<input>"}]}], "status": "success"}
{"kind": "response", "query-id": "3", "response": [{"level": "error", "message": "Expected expression of type \"int\"; got expression \"\"A\"\" of type \"string\"", "number": 189, "ranges": [{"beg": [4, 48], "end": [4, 51], "fname": "<input>"}]}], "status": "failure"}
{"kind": "response", "query-id": "4", "response": [], "status": "success"}
{"contents": {"depth": 1, "goals": [{"goal": {"label": "", "type": "bool", "witness": "(*?u[...]*) _"}, "hyps": []}], "label": "at the time of failure", "location": "<location removed>", "smt-goals": [], "urgency": 1}, "kind": "message", "level": "proof-state", "query-id": "5"}
{"kind": "response", "query-id": "5", "response": [{"level": "error", "message": "user tactic failed: `exact: 1 : int does not exactly solve the goal bool (witness = (*?u[...]*) _)`", "number": 228, "ranges": [{"beg": [4, 14], "end": [4, 57], "fname": "<input>"}, {"beg": [73, 12], "end": [73, 16], "fname": "FStar.Tactics.Derived.fst"}]}], "status": "failure"}
